arithmetic operations
=====================

# calculate a floating number with a given precision
bc <<< 'scale=2; 100/3'
printf "%.2f\n" "$(echo '100/3' | bc -l)"

# calculate a floating number in a long format
bc -l <<< '100/3'

# increment a value stored in variable ${i}
echo $(( i++ ))
var=$((var+1))
((var=var+1))
((var+=1))
((var++))
let "var=var+1"
let "var+=1"
let "var++"

# produce a random number between 0 and 32767
echo ${RANDOM}

# produce a random number between 1 and 100
echo $(( $RANDOM % 100 + 1 ))
---
shuf -i 0-100 -n 1

# produce 5 random numbers between 1 and 100
shuf -i 0-100 -n 5

# produce a random float number between 0 and 1
awk 'BEGIN{x=rand(); print x}'



arrays
======

# create an array
array=(zero one two three four [5]=five)

# append a string to array
array+=(six)

# get array size
echo "array size: ${#array[*]}"

# show array items
for item in ${array[*]}; do
	printf "%s\n" ${item}
done

# print array indexes and items
for index in ${!array[*]}; do
	printf "%4d: %s\n" "${index}" "${array[$index]}"
done

# randomize (shuffle) array
array=( 1 2 3 4 5)
array=( $(shuf -e "${array[@]}") )

# get a random number from array
i=$(( ${RANDOM} % 3 ))
echo ${array[$i]}

# return array results from a function
update_array() {
  local -n arr=$1
  arr+=("two three" four)
}

# get array length
echo ${#array[@]}

# read file to array
readarray -t arr1 < /path/to/filename



associative arrays (dictionaries)
=================================

# declare associative array (dictionary)
declare -A my_dict

# set values in a dictionaries
my_dict["key1"]="value1"
my_dict["key2"]="value2"

# sccess values in a dictionary
echo ${my_dict["key1"]}
echo ${my_dict["key2"]}

# check if key exists in a dictionary
if [[ -n "${my_dict[key1]}" ]]; then
    echo "key1 exists"
fi

# iterate over keys in a dictionary
for key in "${!my_dict[@]}"; do
    echo "$key: ${my_dict[$key]}"
done

# get all keys in a dictionary
echo "Keys: ${!my_dict[@]}"

# get all values in a dictionary
echo "Values: ${my_dict[@]}"

# pass a dictionary to a function as parameter
process_dict() {
     # Create nameref to the array
    local -n dict_ref=$1
    # mccess values
    echo "Name: ${dict_ref[name]}"
    # modify the original array
    dict_ref["status"]="processed"
}



variables
=========

# split tab separated line into variables
IFS=$'\t' read -r id name year lang <<< "${arr1[0]}"

