comparisons
===========

# show comparison operators
help test

# check if string matches a regex
[[ "${str_var}" =~ regex_string ]] && echo 'match'



misc
====

# loop n number of times
for i in {0..10}; do echo ${i}; done
for ((n=0;n<10;n++)); do echo ${i}; done
seq 10 | xargs -Iz echo "Hi there z"
parallel echo ::: {1..10}

# pipe output of multiple commands to another command
(echo zzz; echo aaa; echo kkk) | sort

# iterate null termianted list of files
while IFS= read -r -d $'\0' file; do
    a[i++]="$file"
done < <(find /tmp -type f -print0)

# 'set -o' options
noclobber	do not overwrite files

# read file line by line
while read -r line; do
  echo "... ${line} ..."
done < ${file}
---
while read -r line; do
  echo "... ${line} ..."
done < <(cat ${file})

# read file line by line using file descriptor 3 instead of stdin
while read -r -u 3 line; do
  echo "... ${line} ..."
done 3< ${file}

# read lines from a variable
while read -r line; do
	echo "... ${line} ..."
done <<< "${list}"

# run python script in bash
python <<< """import json; print('hello')"""

# create a multiline file
cat > /etc/myconfig.conf <<EOF
line 1
line 2
line 3
line 4
EOF

# check is shell is interactive
[[ $- == *i* ]] && echo 'is interactive'

# catch sigint to exit script
trap "exit" INT

# disable unsetting for first argument by defining default value
arg="${1:-empty_arg}"

# show all script arguments starting from 2
echo "${@:2}"

# read line by line from file ${1}, or stdin if ${1} is missing
while read line; do
	echo "${line}"
done < "${1:-/dev/stdin}"

# read from stdin
stdin_var="$(cat)"
---
stdin_var="$(cat -)"
---
stdin_var="$(cat <&0)"

# read files in a '\0' terminated list
find . -print0 | while read -d $'\0' file; do echo "${file}"; done

# read a file character by character
sed 's|\(.\)|\1\n|g' file1.txt | while read char; do echo $char; done
---
var1=$(<file1.txt)
for i in $(seq 0 ${#var1}); do echo "${var1:${i}:1}"; done

# 'which' command replacements
whence <program>
---
type -p <program>

# execute command with args from an array
sed "${args[@]}" file.txt

# store interactive user input into variable
read -p "Enter user: " user
---
read -p -s "Enter password: " pass

# wait for user confirmation
read -p "Continue? (Y/N): " confirm
[[ ${confirm} == [yY] || ${confirm} == [yY][eE][sS] ]] || exit 1

# when using pipefail don't break the pipe when grep doesn't find the string
echo "anything" | { grep e || :; } | head

# append to array while using 'while read'
grep_args=()
while read -r count ip; do
  args+="-e ' ${ip} ' "
done <<< "${ip_count_list}"

