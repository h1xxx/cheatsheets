openssh
=======

# generate host keys
ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key
---
ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
---
ssh-keygen -A

# generate keys with a different name
ssh-keygen -t ed25519 -C comment1 -f id_ed25519_file1

# generate public key from a private key
ssh-keygen -y -f id_rsa_server

# replacement for scp command (todo: verify)
ssh remote \"cd /src; tar -cf - .\" | (cd /dst; tar -xf -)
---
dd if=filename | ssh hostname dd of=remote_filename

# login through a jumpbox
ssh -J <user>@<jumpbox>[:port] <user>@<target_machine> [-p 2222]

# copy keys to a remote host with a new identity file
ssh-copy-id -i id_rsa_user.pub user@server

# execute local script remotely
ssh user@host 'bash -s' < /path/script.sh
---
cat /path/script.sh | ssh user@host 'bash -s'

# run multiple commands via ssh
ssh host1 bash << EOF
ls some_folder;
./someaction.sh 'some params'
pwd
./some_other_action 'other params'
EOF

# login without host key check
ssh -o'StrictHostKeyChecking=no' -o'UserKnownHostsFile=/dev/null' root@1.1.0.4

# test ssh connection
ssh -q user@host exit && echo up || echo down

# check if ssh server port is open
ssh -o BatchMode=yes -o ConnectTimeout=5 -o PubkeyAuthentication=no -o PasswordAuthentication=no -o KbdInteractiveAuthentication=no -o ChallengeResponseAuthentication=no -p 22 10.0.0.1 2>&1 | grep -c "Permission denied"

# run a command with colored output
ssh -t ls --color=auto

# get a host public key
ssh-keyscan -t ed25519 host

# get a host fingerprint
ssh-keyscan -t ed25519 host | ssh-keygen -lf -

# see client ip address
ssh host1 'cut -d" " -f1 <<< ${SSH_CLIENT}'
---
ssh host1 'echo ${SSH_CONNECTION} | awk "{print $1}"'

# remote port forwarded to host1 ('GatewayPorts yes' and modified Host header)
ssh -v -p 22 -N -R 8080:192.168.1.1:80 host1

# local port forward
ssh -N -L local_port:destination_server_ip:remote_port user@ssh_server

# connect to a remote router (exposed on localhost:8080, access via proxy)
ssh -v -N -L 8080:192.168.1.1:80 host1
mitmproxy -p 8081 -H '/Host/192.168.1.1'

# store typed passwords for keys within a new shell session
ssh-agent bash -l
ssh-add ~/.ssh/id_ed25519



dropbear
========

# generate a keypair
dropbearkey -f id_rsa -t rsa -s 2048

# print public key
dropbearkey -y  -f ~/.ssh/id_rsa  -b 2048 | grep '^ssh-rsa'

# convert a key to dropbear format; wrong format produces string too long error
dropbearconvert openssh dropbear id_rsa id_rsa.dropbear



rsync
=====

# run rsync with ssh on a different port
rsync -rvz -e 'ssh -p 2222' --progress

# copy multiple files from a remote host
rsync 'host://root/file1 file2' ./dir1


issues
======

# run command when ssh command hangs indefinitely
ssh -T root@host1 uptime
---
ssh -n -t root@host1 uptime

