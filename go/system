exec
====

# run a command and save its standard output
cmd := exec.Command("ls", "-l", "-R")
        stdout, err := cmd.Output()

# run a command and print its standard output and error
cmd := exec.Command("ls", "-l")
cmd.Stdout = os.Stdout
cmd.Stderr = os.Stderr
cmd.Run()

# catch a signal
import "os/signal" "syscall"
sigCh := make(chan os.Signal, 2)
        signal.Notify(sigCh,
                syscall.SIGHUP,
                syscall.SIGINT,
                syscall.SIGTERM,
                syscall.SIGQUIT)
        go func() {
                sig := <-sigCh
                fmt.Println("signal caught:", sig)
                fmt.Println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
                os.Exit(1)
        }()

# get exit status of executed command
err := cmd.Run()
exitErr, exitNot0 := err.(*exec.ExitError)
if exitNot0 {
	fmt.Println("exit code: ", exitErr.ExitCode())
}

# start a command and then kill it with stdout and stderr in separate vars
cmd := exec.Command("unzip")
var outb, errb bytes.Buffer
cmd.Stdout = &outb
cmd.Stderr = &errb
err := cmd.Start()
err = cmd.Process.Kill() ||  err := cmd.Wait()

# send a signal to a process
err = cmd.Process.Signal(syscall.SIGINT)

# get a running process residual memory (RSS)
func getProcessMem() int {
        file := fmt.Sprintf("/proc/%d/smaps", syscall.Getpid())
        b, _ := os.ReadFile(file)
        lines := str.Split(string(b), "\n")
        var mem int
        for _, line := range lines {
                if str.HasPrefix(line, "Rss:") {
                        fields := str.Fields(line)
                        rss, _ := strconv.Atoi(fields[1])
                        mem += rss
                }
        }
        return mem
}

# get a running process memory (verify if faster)
getMemUsed(pid int) float64 {
        f, _ := os.Open(fmt.Sprintf("/proc/%d/smaps", pid))
        defer f.Close()
        res := uint64(0)
        pfx := []byte("Pss:")
        r := bufio.NewScanner(f)
        for r.Scan() {
                line := r.Bytes()
                if bytes.HasPrefix(line, pfx) {
                        var size uint64
                        _, _ = fmt.Sscanf(string(line[4:]), "%d", &size)
                        res += size
                }
        }
        return float64(res) / 1024.0
}



system
======

# get user ID (uid), group ID (gid), user name and home dir
import "os/user"
user, err := user.Current()
fmt.Println(user.Uid, user.Gid, user.Username, user.HomeDir)

# find number of cpus (nproc)
import runtime
fmt.Println(runtime.NumCPU())

# exec a command from a string
func run(command string) error {
	bin, args := splitCmd(command)
	cmd := exec.Command(bin, args...)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	err := cmd.Run()
	return err
}
func splitCmd(command string) (bin string, args []string) {
	l := strings.Split(command, " ")
	for i, arg := range l {
		if i == 0 {
			bin = arg
			continue
		}
		args = append(args, arg)
	}
	return
}
