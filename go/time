time
====

# convert integer to time
scanTimeTime := time.Unix(scanTimeInt, 0)

# print seconds since epoch
scanTimeTime.Unix()

# measure wall time
start := time.Now()
// Code to measure
duration := time.Since(start)
fmt.Println(duration)	 // formatted string e.g."2h3m0.5s", "4.503Î¼s"
fmt.Println(duration.Nanoseconds())	 // Nanoseconds as int64
fmt.Println(duration.Milliseconds())	 // Miliseconds as int64

# convert int to time
t := time.Unix(i, 0)

# measure user and system time
cmd := exec.Command("ls", "-l", "-R")
err := cmd.Run()
x := cmd.ProcessState.SystemTime() + cmd.ProcessState.UserTime()

# calculate duration between 2 times
dur := t1.Sub(t2)

# print formatted date and time
fmt.Println(t.Format("2006-01-02 15:04:05"))
fmt.Println(t.Format("20060102150405"))

# print formatted date and time - the ugly, but flexible way
fmt.Printf("%d-%.2d-%.2d %.2d:%.2d:%.2d\n",
	t.Year(), t.Month(), t.Day(), t.Hour(), t.Minute(), t.Second())

# print formatted date and time
fmt.Printf("%d-%.2d-%.2d_%.2d:%.2d:",
	t.Year(), t.Month(), t.Day(), t.Hour(), t.Minute())

# parse local time from string
layout := "2006-01-02T15:04:05.999999999Z07:00"
t, err := time.Parse(layout, 2021-06-18T22:27:22.000-05:00)
local, _ := time.LoadLocation("Local")
localTime = t.In(local)

# save time as string and read it back
nowString := time.Now().Format(time.RFC1123Z)
parsed, err := time.Parse(time.RFC1123Z, nowString)

# add time to time
time.Now().Add(time.Second * time.Duration(seconds))
time.Now().Add(time.Minute * time.Duration(minutes))
time.Now().Add(time.Hour * time.Duration(hours))

# add 15 minutes
newT = t.Add(time.Minute * 15)

# add 1 year 2 months 4 days
newT = time.Now().AddDate(1, 2, 4)

# get timezone information
zone_name, offset := timeVar.Zone()

# round time
rounded := time.Date(toRound.Year(), toRound.Month(), toRound.Day(), 0, 0, 0, 0, toRound.Location())



formats
=======

# convert time to string
dt := time.Now()
dt.Format("01-02-2006"))
dt.Format("2006-01-02"))
dt.Format("2006.01.02 15:04:05"))
dt.Format("2006#01#02"))
dt.Format("2006-01-02 15:04:05"))
dt.Format("2006-01-02 15:04:05.000000"))
dt.Format("2006-01-02 15:04:05.000000000"))
dt.Format("2006-1-02"))
dt.Format("2006-January-02"))
dt.Format("2006-Jan-02"))
dt.Format("06-Jan-02"))
dt.Format("2006-01-02 15:04:05 Monday"))
dt.Format("2006-01-02 Mon"))
dt.Format("Mon 2006-01-2"))
dt.Format("2006-01-02 3:4:5"))
dt.Format("2006-01-02 3:4:5 PM"))
dt.Format("2006-01-02 3:4:5 pm"))

# time format fields
stdLongMonth		"January"
stdMonth		"Jan"
stdNumMonth		"1"
stdZeroMonth		"01"
stdLongWeekDay		"Monday"
stdWeekDay		"Mon"
stdDay			"2"
stdUnderDay		"_2"
stdZeroDay		"02"
stdHour			"15"
stdHour12		"3"
stdZeroHour12		"03"
stdMinute		"4"
stdZeroMinute		"04"
stdSecond		"5"
stdZeroSecond		"05"
stdLongYear		"2006"
stdYear			"06"
stdPM			"PM"
stdpm			"pm"
stdTZ			"MST"
stdISO8601TZ		"Z0700"  // prints Z for UTC
stdISO8601ColonTZ	"Z07:00" // prints Z for UTC
stdNumTZ		"-0700"  // always numeric
stdNumShortTZ		"-07"    // always numeric
stdNumColonTZ		"-07:00" // always numeric

# time layouts
ANSIC		"Mon Jan _2 15:04:05 2006"
UnixDate	"Mon Jan _2 15:04:05 MST 2006"
RubyDate	"Mon Jan 02 15:04:05 -0700 2006"
RFC822		"02 Jan 06 15:04 MST"
RFC822Z		"02 Jan 06 15:04 -0700" // RFC822 with numeric zone
RFC850		"Monday, 02-Jan-06 15:04:05 MST"
RFC1123		"Mon, 02 Jan 2006 15:04:05 MST"
RFC1123Z	"Mon, 02 Jan 2006 15:04:05 -0700" // RFC1123 with numeric zon
RFC3339		"2006-01-02T15:04:05Z07:00"
RFC3339Nano	"2006-01-02T15:04:05.999999999Z07:00"
Kitchen		"3:04PM"
Stamp		"Jan _2 15:04:05"
StampMilli	"Jan _2 15:04:05.000"
StampMicro	"Jan _2 15:04:05.000000"
StampNano	"Jan _2 15:04:05.000000000"

